ABI := arm-none-eabi
CC := $(ABI)-gcc
LD := $(ABI)-ld
OBJCOPY := $(ABI)-objcopy
override CFLAGS := -Wall -Wextra -Wdouble-promotion -Wpointer-arith -std=gnu99 -O2 -mlittle-endian -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard -mthumb -ggdb3 -fno-common -ffunction-sections -static -isystem include $(CFLAGS)
override LDFLAGS := $(LDFLAGS) -Wl,--gc-sections -Wl,--build-id=none $(CFLAGS)



# Collect all source files for the project and libraries.
# Special case: FreeRTOS source files are in the source/ subdirectory.
# For everything else, we collect from the top-level directory.
SOURCE_DIRS := $(PROJECT) $(filter-out freertos,$(LIBRARIES)) $(if $(filter freertos,$(LIBRARIES)),freertos/source)
SOURCES := $(shell find $(SOURCE_DIRS:%=../%) -name '*.c')

# Collect all header files used in compiling the project and libraries.
# We include all headers here, public and private, because they all need to spur recompilation of source files.
# Special case: FreeRTOS must not search its entire vendor/ tree for headers, only include/.
HEADER_DIRS := $(PROJECT) $(filter-out freertos,$(LIBRARIES)) $(if $(filter freertos,$(LIBRARIES)),freertos/include)
HEADERS := $(shell find $(HEADER_DIRS:%=../%) -name '*.h')

# Collect system include directories based on used libraries.
SYS_INC_DIRS := $(LIBRARIES:%=../%/include)

# The linker script.
LINKER_SCRIPT := ../stm32lib/stm32f405.ld

# Compute the object files we will build.
OBJS := $(SOURCES:../%.c=obj/%.o)



override CFLAGS := $(CFLAGS) $(LIBRARIES:%=-isystem ../%/include) -I. -DSTM32LIB_USE_FREERTOS=$(if $(filter freertos,$(LIBRARIES)),1,0)
override LDLIBS := $(LDLIBS) -lm 
override LDFLAGS := $(LDFLAGS) -Wl,-T$(LINKER_SCRIPT)


.PHONY : world
world : $(PROJECT).bin

%.bin : %.elf
	@echo " OBJCOPY   $@"
	@$(OBJCOPY) -O binary $+ $@

$(PROJECT).elf : $(OBJS) $(LINKER_SCRIPT)
	@echo " LD        $@"
	@$(CC) $(LDFLAGS) -o$@ -Wl,-Map=$(PROJECT).map $(sort $(OBJS)) $(LDLIBS)

$(OBJS) : $(HEADERS) Makefile ../stm32lib/Makefile.common

$(OBJS) : obj/%.o : ../%.c
	@mkdir -p $(shell dirname $@)
	@echo " CC        $@"
	@$(CC) $(CPPFLAGS) $(CFLAGS) -frandom-seed=$@ -c $< -o $@

.PHONY : view 
view : 
	@echo $(HEADERS)

.PHONY : clean
clean :
	$(RM) $(PROJECT).a $(PROJECT).bin $(PROJECT).elf $(PROJECT).map
	$(RM) -r html obj

.PHONY : doc
doc :
	doxygen
