Initial Setup and build instructions

Recommended OS: Ubuntu 10.04 or later
	For Windows users, you can use the wubi installer provided by Ubuntu
	# NOTE: wubi is not supported / doesn't work on Windows 8, so if you have a newer win8 machine you may want to either: 
	1) install linux the old fashion way (using a usb or cd and creating your own partitions... etc, or 
	2) get a development VM and use the free vmware player.
	**2) restricts you to pure software only testing, as it will not work with the hardware we have due to not having good usb support. 	

NOTE: To run commands below: applications->accessories->terminal

These libraries and packages are needed to build the HOST SOFTWARE:
	Google protocol buffers (Ubuntu: sudo apt-get install protobuf-compiler libprotobuf-dev)
	g++ (Ubuntu: sudo apt-get install g++)
	gtkmm-3.0 (Ubuntu: sudo apt-get install libgtkmm-3.0-dev)
	subversion (Ubuntu: sudo apt-get install subversion)
	libode-dev (Ubuntu: sudo apt-get install libode-dev)
	libxml++ (Ubuntu: sudo apt-get install libxml++2.6-dev)
	libgsl0-dev (Ubuntu: sudo apt-get install libgsl0-dev)
	libusb-1.0-0-dev (Ubuntu: sudo apt-get install libusb-1.0-0-dev)
	CPPUnit (Ubuntu: sudo apt-get install libcppunit-dev)
	bzip2 (Ubuntu: sudo apt-get install libbz2-dev)
	libboost-coroutine-dev (Ubuntu: sudo apt-get install libboost-coroutine-dev)

----- Ubuntu 11.04 Natty Narwhal to Ubuntu 14.04 or related ----

Run this command:

sudo apt-get install protobuf-compiler libprotobuf-dev g++ libgtkmm-3.0-dev subversion libode-dev libxml++2.6-dev libgsl0-dev libusb-1.0.0-dev libcppunit-dev libboost-coroutine-dev libbz2-dev

---Downgrading libboost-coroutine-dev to 1.54 (Ubuntu 16.04)---

Unfortunately the current trunk doesn't compile because the latest version of the coroutine library (1.58) in Ubuntu 16.04 broke things, so until we make the code compatible with the new version the current fix is to downgrade the coroutine library.

Check your coroutine library version: dpkg -s libboost-coroutine-dev | grep 'Version'
If it is 1.58.0.1, then follow the rest of this section, otherwise skip. 

Begin by removing the current version by running: 
1) sudo apt-get remove libboost-coroutine-dev libboost1.58-dev
2) sudo apt-get autoremove

Then you need to add the Ubuntu 14.04 (trusty) repository:
1) Run sudo gedit /etc/apt/sources.list
2) Add the following line to the bottom of the file: deb http://cz.archive.ubuntu.com/ubuntu trusty main universe
3) Save and close gedit.
4) Run sudo apt-get update

Finally install the proper version: sudo apt-get install libboost-coroutine1.54-dev libboost-dev

Run "dpkg -s libboost-coroutine-dev | grep 'Version'" (no quotes) again to check if the proper version has installed.


----- Installing and running grSim -----------------------------

These libraries and packages are needed to build and run grSim:

	libqt4-dev (Ubuntu: sudo apt-get install libqt4-dev)
	libgl1-mesa-dev (Ubuntu: sudo apt-get install libgl1-mesa-dev)
	libglu1-mesa-dev (Ubuntu: sudo apt-get install libglu1-mesa-dev)
	protobuf (Ubuntu: sudo apt-get install protobuf-compiler)
	mercurial (Ubuntu: sudo apt-get install mercurial)
	git (Ubuntu: sudo apt-get install git)
	cmake (Ubuntu: sudo apt-get install cmake)
	
To install all of these libraries and packages, run this command (Ubuntu 11.04 or newer)
	
	sudo apt-get install libqt4-dev libgl1-mesa-dev libglu1-mesa-dev protobuf-compiler mercurial git cmake
	
When all the libraries and packages are install, run the following commands to install grSim	

	Open terminal and run the following commands:
		
		// Install Vartypes
		git clone https://github.com/roboime/vartypes
		cd vartypes
		make
		sudo make install

		*** NOTE: Put grSim and vartypes in seperate folders, preferably under a RoboCup parent directory.***

		// You may have to run the following otherwise some library files might not be found properly
		sudo gedit /etc/ld.so.conf
		// add the following line and save:
		/usr/local/lib
		// then run the following:		
		sudo ldconfig
		// You'll then have to logout and login again for this to take effect.
		
                // Warning: as of May 2014, with Ubuntu 14.04 LTS the grSim binary in the github repo does not work anymore.
                // This is because it uses an older version of libprotobuf.so.7, 
                // while the latest version you can easily grab from running apt-get install is libprotobuf 8. 
                // You may try to install the older protobuf library to run the grSim binary at your own risk.
               
		// You can then download grSim's binary directly.
		// It is recommeneded to not use the .deb package, instead use the tar.gz version. 
		https://github.com/roboime/grSim/downloads

                // Downloading and compiling the source yourself is now the preferred and working method for Ubuntu 14.04 LTS. 
		// Or if you really prefer compiling and installing grSim yourself...
		git clone https://github.com/mani-monaj/grSim (should use roboime instead)
		cd grSim
		mkdir build
		cd build
		cmake ..
		make
		// warning: the compile may not succeed completely, but ignore the errors as long as you see a "grsim" binary under bin/

----------------To build host software via command line:--------------------------------
	cd thunderbots/software
	make

For parallel build with multicore computers:
	cd thunderbots/software
	make -j4

If you do not want build to stop after the first error:
	cd thunderbots/software
	make -k

To run the unit tests:
	cd thunderbots/software
	make check

The executables will be in the "bin" directory. Each can be run with "--help" to provide information about command-line arguments.

-----------------To run grSim:---------------------------------------------------------

	// open grSim
	cd grSim
	bin/grSim

	// Run the ai
	cd thunderbots/trunk/software/
	bin/ai
	// select grSim as backend
	
	// To run 2 AIs (have a match against each other), run the ai again, and go to secondary tab and change team colour and defending direction

-------------------To use the XBEE/MRF:-------------------------------------------
	You need to have filesystem permission to access USB devices.
	Create a system group named "thunderbots" (sudo groupadd thunderbots).
	Place your user in the group (sudo gpasswd -a myuser thunderbots).
	Log out and back in so the new membership is activated.
	Copy the file "99-thunderbots.rules" into "/etc/udev/rules.d" (you must be root to do this, e.g. by using sudo).
	This is secure and will grant access to the dongle but nothing else.

---------------------Eclipse environemnt set up instructions-----------------------------
To setup the project in Eclipse:
	File->New Project
	Under C/C++ choose C++ Project
	Click Next
	Name the project whatever you want
	Uncheck "Use default location" and browse to the trunk/software directory and press OK
	Under Makefile project select Empty Project
	Select Finish

To build in Eclipse:
	File->New->Standard Make C++ Project.
	Choose thunderbots/software directory.
	Right click on project (in left pane) and go to properties.
	C/C++ Make Projects and put in /project_name into build directory (for me this is /robocup).
	Also recommended to check the box for autobuilding.
	You may need to set include directories for gtkmm.
	Under C/C++ Build settings, do not use default build command, set build command to "make".
	You are recommended to modify the code style.

To run in Eclipse:
	Run->Run.
	Don't forget to add command-line arguments. See above for details.

To use svn in Eclipse:
	http://subclipse.tigris.org/
	(to upload and download changes from the repository)
