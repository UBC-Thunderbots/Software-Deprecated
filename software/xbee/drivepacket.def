// Note: The first eight bits (0â€“7) are special in that they are set to zero when the run switch is off.

// True -> motors run at powers sent by the MCU. False -> motors dynamic brake, phases locked.
BITCODEC_DATA_BOOL(enable_wheels, 0, false)

// True -> boost converter sends pulses until capacitors reach target. False -> boost converter idles.
BITCODEC_DATA_BOOL(enable_charger, 1, false)

// True -> dribbler motor runs at power level specified in parameter block. False -> dribbler motor off.
BITCODEC_DATA_BOOL(enable_dribbler, 2, false)

// True -> when ball detected, execute kick with parameters (autokick_width1, autokick_width2, autokick_offset, autokick_offset_sign). False -> do not kick when ball detected.
BITCODEC_DATA_BOOL(enable_autokick, 3, false)

// True -> when autokicking, right solenoid fires autokick_offset time after left solenoid. False -> left solenoid fires autokick_offset time after right solenoid.
BITCODEC_DATA_BOOL(autokick_offset_sign, 4, false)

// True -> run wheels with controllers. False -> run wheels open-loop.
BITCODEC_DATA_BOOL(enable_controllers, 5, false)

// Target speeds of the wheels, in quarters of a degree per five milliseconds.
BITCODEC_DATA_S(int16_t, uint16_t, wheel1, 8, 11, 0)
BITCODEC_DATA_S(int16_t, uint16_t, wheel2, 19, 11, 0)
BITCODEC_DATA_S(int16_t, uint16_t, wheel3, 30, 11, 0)
BITCODEC_DATA_S(int16_t, uint16_t, wheel4, 41, 11, 0)

// When autokicking, the width of the pulse sent to the left solenoid, in 32us units.
BITCODEC_DATA_U(uint8_t, autokick_width1, 52, 7, 0)

// When autokicking, the width of the pulse sent to the right solenoid, in 32us units.
BITCODEC_DATA_U(uint8_t, autokick_width2, 59, 7, 0)

// When autokicking, the time difference between the start of the left solenoid pulse and the start of the right solenoid pulse, in 32us units.
BITCODEC_DATA_U(uint8_t, autokick_offset, 66, 7, 0)
